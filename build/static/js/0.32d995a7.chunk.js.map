{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/keycode/index.js","../node_modules/howler/dist/howler.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"],"names":["_classCallCheck","instance","Constructor","TypeError","__webpack_require__","d","__webpack_exports__","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_inherits","subClass","superClass","create","constructor","value","_typeof2","obj","Symbol","iterator","_typeof","_possibleConstructorReturn","self","call","assertThisInitialized","keyCode","searchInput","hasKeyCode","which","charCode","names","foundNamedKey","search","String","codes","toLowerCase","aliases","charCodeAt","isEventKey","event","nameOrCode","undefined","exports","module","code","backspace","tab","enter","shift","ctrl","alt","pause/break","caps lock","esc","space","page up","page down","end","home","left","up","right","down","insert","delete","command","left command","right command","numpad *","numpad +","numpad -","numpad .","numpad /","num lock","scroll lock","my computer","my calculator",";","=",",","-",".","/","`","[","\\","]","'","windows","⇧","⌥","⌃","⌘","ctl","control","option","pause","break","caps","return","escape","spc","spacebar","pgup","pgdn","ins","del","cmd","fromCharCode","title","alias","global","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","this","init","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","_resumeAfterSuspend","Howl","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","action","url","str","exec","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","stop","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","indexOf","apply","fade","from","to","len","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","index","splice","remCache","cache","on","events","off","isId","keys","Array","isArray","msg","task","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","createGain","createGainNode","_errorListener","_loadListener","ceil","__default","loadSound","data","atob","dataView","Uint8Array","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","_assertThisInitialized","ReferenceError"],"mappings":"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","file":"static/js/0.32d995a7.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\n * Conenience method returns corresponding value for given keyName or keyCode.\n *\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Mixed}\n * @api public\n */\nfunction keyCode(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;\n    if (hasKeyCode) searchInput = hasKeyCode;\n  } // Numbers\n\n\n  if ('number' === typeof searchInput) return names[searchInput]; // Everything else (cast to string)\n\n  var search = String(searchInput); // check codes\n\n  var foundNamedKey = codes[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey; // check aliases\n\n  var foundNamedKey = aliases[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey; // weird character?\n\n  if (search.length === 1) return search.charCodeAt(0);\n  return undefined;\n}\n/**\n * Compares a keyboard event with a given keyCode or keyName.\n *\n * @param {Event} event Keyboard event that should be tested\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Boolean}\n * @api public\n */\n\n\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\n  if (event && 'object' === typeof event) {\n    var keyCode = event.which || event.keyCode || event.charCode;\n\n    if (keyCode === null || keyCode === undefined) {\n      return false;\n    }\n\n    if (typeof nameOrCode === 'string') {\n      // check codes\n      var foundNamedKey = codes[nameOrCode.toLowerCase()];\n\n      if (foundNamedKey) {\n        return foundNamedKey === keyCode;\n      } // check aliases\n\n\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()];\n\n      if (foundNamedKey) {\n        return foundNamedKey === keyCode;\n      }\n    } else if (typeof nameOrCode === 'number') {\n      return nameOrCode === keyCode;\n    }\n\n    return false;\n  }\n};\n\nexports = module.exports = keyCode;\n/**\n * Get by name\n *\n *   exports.code['enter'] // => 13\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'left command': 91,\n  'right command': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222 // Helper aliases\n\n};\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'spacebar': 32,\n  'pgup': 33,\n  'pgdn': 34,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n  /*!\n   * Programatically add the following\n   */\n  // lower case chars\n\n};\n\nfor (i = 97; i < 123; i++) {\n  codes[String.fromCharCode(i)] = i - 32;\n} // numbers\n\n\nfor (var i = 48; i < 58; i++) {\n  codes[i - 48] = i;\n} // function keys\n\n\nfor (i = 1; i < 13; i++) {\n  codes['f' + i] = i + 111;\n} // numpad keys\n\n\nfor (i = 0; i < 10; i++) {\n  codes['numpad ' + i] = i + 96;\n}\n/**\n * Get by code\n *\n *   exports.name[13] // => 'Enter'\n */\n\n\nvar names = exports.names = exports.title = {}; // title for backward compat\n// Create reverse mapping\n\nfor (i in codes) {\n  names[codes[i]] = i;\n} // Add aliases\n\n\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias];\n}","/*!\n *  howler.js v2.1.2\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function HowlerGlobal() {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function init() {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function volume(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function mute(muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function unload() {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function codecs(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function _setup() {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function _setupCodecs() {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function _unlockAudio() {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function unlock(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i = 0; i < self.html5PoolSize; i++) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function _obtainHtml5Audio() {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function _autoSuspend() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function () {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        });\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function _autoResume() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function Howl(o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function init(o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function load() {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function play(sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function setParams() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = loop;\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function playWebAudio() {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function playHtml5() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function listener() {\n            // Begin playback.\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function pause(id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function action() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function stop(id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function action() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function mute(muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function action() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function volume() {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function action() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function fade(from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function action() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Make sure the volume is in the right bounds.\n\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol); // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Change the volume.\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function _stopFade(id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function loop() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function rate() {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function action() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function seek() {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return self;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function action() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function seekAndEmit() {\n            self._emit('seek', id); // Restart the playback if the sound was playing.\n\n\n            if (playing) {\n              self.play(id, true);\n            }\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function emitSeek() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function playing(id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function duration(id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function state() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function unload() {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function on(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function off(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function once(event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function _emit(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function _loadQueue(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function _ended(sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function _clearTimer(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function _soundById(id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function _inactiveSound() {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function _drain() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function _getSoundIds(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function _refreshBuffer(sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function _cleanBuffer(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function _clearSound(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function Sound(howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function init() {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function create() {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function reset() {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function _errorListener() {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function _loadListener() {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function loadBuffer(self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function safeXhrSend(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function decodeAudioData(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function error() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function success(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function loadSound(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function setupAudioContext() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Define globally in case AMD is not available or unused.\n\n\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') {\n    // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.2\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function action() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function action() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function action() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function setupPanner(sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}"],"sourceRoot":""}